<svelte:options immutable={true} />

<script
	context="module"
	lang="ts"
>
	const splice = (
		input: any[],
		start: number,
		deleteCount = input.length - start,
		...items: any[]
	) => input.slice(0, start).concat(...items, input.slice(start + deleteCount));

	const MODEL_MAP = {
		Guard: Guard,
		Dog: Dog,
		Door: Door,
		Object: MapObject
	} as const;

	export const CurrentLevel = _levelStore();

	function _levelStore() {
		let TILES: World = [];
		const { subscribe, set, update } = writable<World>([]);

		const checkCollisionWithWorld = (position: Position | Position2D, isBot = false) => {
			const { model, position: wallPosition, surfaces } = TILES[position!.z][position!.x];

			if (model?.texture && noClipObjectIds.includes(model?.texture)) {
				handleNoClipObject(model, position);
				return false;
			} else if (model?.texture) return true;

			if (isWall(model, wallPosition)) return true;

			if (isBot && isEnemy(model)) return true;
			else if (isEnemy(model)) return false;

			return hasValidTexture(surfaces);
		};

		const handleNoClipObject = (model: NonNullable<Entity["model"]>, position: Position2D) => {
			if (model.texture === ItemPickups.Ammo) {
				model.texture = undefined;
				updateTileAt(position.x, position.z, { rotation: undefined, surfaces: null });
				PlayerState.giveAmmo("pistol", 4);
			}
			if (model.texture === ItemPickups.Medkit) {
				model.texture = undefined;
				updateTileAt(position.x, position.z, { rotation: undefined, surfaces: null });
				PlayerState.giveHealth(25);
			}
		};

		const isWall = (model: Entity["model"], position: Entity["position"]) => {
			return (
				position &&
				model?.component !== "Object" &&
				position.x === position.x &&
				position.z === position.z
			);
		};

		const isEnemy = (model: Entity["model"]) => {
			return model?.component === "Guard" || model?.component === "Dog";
		};

		const hasValidTexture = (surfaces: Entity["surfaces"]) => {
			return compare(surfaces, (t) => isValidTexture(t) !== false);
		};

		const updateTileAt = (x: number, z: number, data: Entity) => {
			update((u) => {
				u = [...u.slice(0, x), splice(u[x], z, 1, data), ...u.slice(x + 1)];
				TILES = u;
				return u;
			});
		};
		return {
			subscribe,
			get() {
				return TILES;
			},
			set(level: World) {
				TILES = level;
				set(TILES);
			},
			updateTileAt,
			update,
			checkCollisionWithWorld
		};
	}
</script>

<script lang="ts">
	import { frameLoop } from "$lib/utils/raf";
	import { getDistanceFromPoints } from "$lib/utils/position";
	import { isValidTexture } from "../utils/validation";
	import { onMount } from "svelte";
	import { PlayerState } from "$lib/stores/player";
	import { writable } from "svelte/store";

	import MapObject from "$lib/components/MapObject.svelte";
	import Door from "$lib/components/Door.svelte";
	import Guard from "$lib/components/Guard/Guard.svelte";
	import Player from "$lib/components/Player.svelte";
	import Wall from "$lib/components/Wall.svelte";

	import type { Position, Position2D } from "$lib/types/position";
	import type { Entity, Surface, WallFace, World } from "../types/core";
	import { compare } from "../utils/compare";
	import { isVisibleToPlayer } from "../utils/angle";
	import { GameObjects } from "$lib/utils/manager";
	import { ItemPickups, noClipObjectIds } from "$lib/utils/engine/objects";
	import Dog from "./Dog/Dog.svelte";

	export let level: World = [];
	export let mode: "editor" | "generating" | "play" = "play";

	let worldRef: HTMLElement;

	let gameLoop: ReturnType<(typeof frameLoop)["add"]>;

	function update() {
		if (!worldRef) return;
		const { x, y, z } = $PlayerState.position ?? { x: 0, y: 0, z: 0 };

		worldRef.style.transform = `translate3d(${x}px, ${y}px, ${z}px)`;
		for (const obj of GameObjects) {
			if (!obj) continue;
			queueMicrotask(() => {
				const pos = obj.getPosition?.();
				if (!pos) return;
				const visible = isVisibleToPlayer(obj, -180);
				const distance = getDistanceFromPoints(
					{ x: pos.x - 50, z: pos.z },
					{ x, y, z } /* playerPosition */
				);

				const isVisibleAlready = obj.getVisibility();

				if (visible === false || distance >= 1564) {
					obj.setVisibility(false);
					return;
				} else if (!isVisibleAlready && visible === true) {
					obj.setVisibility(true);
				}
			});
		}
	}
	type ConnectedTile = {
		position: Position2D;
		surface: Surface;
		direction: WallFace | null;
	};

	function dfs(x: number, z: number, world: World, visited: boolean[][]): ConnectedTile[] {
		const directions: Array<[number, number, WallFace]> = [
			[-1, 0, "left"],
			[1, 0, "right"],
			[0, -1, "front"],
			[0, 1, "back"]
		];

		const connectedGroup: ConnectedTile[] = [];
		visited[x][z] = true;

		for (const [dx, dz, direction] of directions) {
			const newX = x + dx;
			const newZ = z + dz;

			if (
				newX >= 0 &&
				newX < world.length &&
				newZ >= 0 &&
				newZ < world[newX].length &&
				!visited[newX][newZ] &&
				!!world[x][z].surfaces &&
				!!world[newX][newZ].surfaces &&
				world[newX][newZ].surfaces === world[x][z].surfaces
			) {
				connectedGroup.push(...dfs(newX, newZ, world, visited));
			}
		}

		return [
			{
				position: { x: x, z: z },
				surface: world[x][z].surfaces,
				direction: null
			},
			...connectedGroup
		];
	}

	function findConnectedTileGroups(world: World): ConnectedTile[][] {
		const visited: boolean[][] = Array.from({ length: world.length }, () =>
			Array(world[0].length).fill(false)
		);

		const connectedTileGroups: ConnectedTile[][] = [];

		for (let x = 0; x < world.length; x++) {
			for (let z = 0; z < world[x].length; z++) {
				if (!visited[x][z]) {
					const connectedGroup = dfs(x, z, world, visited);
					if (connectedGroup.length > 1) {
						connectedTileGroups.push(connectedGroup);
					}
				}
			}
		}

		return connectedTileGroups;
	}

	onMount(() => {
		worldRef = document.getElementById("world")!;
		CurrentLevel.set(level);
		gameLoop = frameLoop.add(update);
		gameLoop.start();
		console.log(findConnectedTileGroups($CurrentLevel), $CurrentLevel);
		setTimeout(() => {
			console.log(GameObjects);
		}, 4000);
		return () => {
			gameLoop.stop();
			frameLoop.dispose();
		};
	});
	$: console.log($CurrentLevel);
</script>

<svelte:window
	on:keydown={(e) => {
		if (e.ctrlKey && e.key.toLowerCase() === "w") e.preventDefault();
		// if (e.key === " ") console.log(Math.min(34, Math.max(12, rand.rnd() / 8)));
	}}
/>

<div id="scene">
	{#if mode !== "generating"}
		<Player>
			<div
				bind:this={worldRef}
				class="world"
				id="world"
			>
				{#each $CurrentLevel as group, section}
					{#each group as item, offset}
						{#if item.model?.component}
							{#if item.model.component === "Guard" || item.model.component === "Dog"}
								<svelte:component
									this={MODEL_MAP[item.model.component]}
									{offset}
									{section}
									bind:this={$GameObjects.enemies[$GameObjects.enemies.length]}
									{item}
								/>
							{:else if item.model.component === "Door"}
								<svelte:component
									this={MODEL_MAP[item.model.component]}
									{offset}
									{section}
									bind:this={$GameObjects.doors[$GameObjects.doors.length]}
									{item}
								/>
							{:else}
								<svelte:component
									this={MODEL_MAP[item.model.component]}
									{offset}
									{section}
									bind:this={$GameObjects.models[$GameObjects.models.length]}
									{item}
								/>
							{/if}
						{:else if item.surfaces}
							<Wall
								bind:this={$GameObjects.walls[$GameObjects.walls.length]}
								{item}
								{section}
								{offset}
							/>
						{/if}
					{/each}
				{/each}
				<div class="floor" />
			</div></Player
		>
	{/if}
</div>

<style lang="scss">
	#scene {
		perspective: calc(var(--perspective));

		will-change: contents;
		// transform: perspective(1000px);
		width: 100%;
		inset: 0;
		overflow: hidden;
		height: 100%;
		backface-visibility: hidden;
		// transform-style: preserve-3d;
	}

	#world {
		position: absolute;
		top: 50% !important;
		left: 50% !important;
		// /* // transform-origin: center; */
		inset: 0;
		// overflow: hidden;

		backface-visibility: hidden;
		will-change: transform, contents;
		// width: 100%;
		// height: 100%;
		contain: layout style size;
		transform-style: preserve-3d;
	}
</style>
